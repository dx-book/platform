# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: tekton-cleaner
#   namespace: {{ .Values.namespace }}
# ---
# kind: ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: tekton-cleaner
# rules:
#   - apiGroups: ["tekton.dev"]
#     resources: ["pipelineruns"]
#     verbs: ["delete", "get", "watch", "list"]
#   - apiGroups: ["tekton.dev"]
#     resources: ["pipelines"]
#     verbs: ["delete", "get", "watch", "list"]
# ---
# kind: ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: tekton-cleaner
# roleRef:
#   kind: ClusterRole
#   name: tekton-cleaner
#   apiGroup: rbac.authorization.k8s.io
# subjects:
#   - kind: ServiceAccount
#     name: tekton-cleaner
#     namespace: {{ .Values.namespace }}
# ---
# apiVersion: batch/v1beta1
# kind: CronJob
# metadata:
#   name: cleanup-pipelineruns
#   namespace: {{ .Values.namespace }}
# spec:
#   schedule: "*/10 * * * *"
#   concurrencyPolicy: Forbid
#   jobTemplate:
#     spec:
#       template:
#         spec:
#           restartPolicy: OnFailure
#           serviceAccount: tekton-cleaner
#           containers:
#             - name: oc
#               image: quay.io/openshift/origin-cli
#               env:
#                 - name: NUM_PIPELINERUNS_TO_KEEP
#                   value: "3"
#               command:
#                 - /bin/bash
#                 - -c
#                 - |
#                     for namespace in $(oc get pipeline -A -o=jsonpath="{range .items[*]}{.metadata.namespace}{'\n'}{end}" | uniq); do
#                         all_pipelineruns_in_namespace=$(oc get pipelinerun -n "$namespace" -o custom-columns=COMPLETED:.status.completionTime,NAME:.metadata.name | sed -n '1!p' | sort)
#                         for pipeline in $(oc get pipeline -n "$namespace" -o=jsonpath="{range .items[*]}{.metadata.name}{'\n'}{end}"); do
#                             # loops over all pipelineruns in a given namespace who have $pipeline as owner
#                             for pipelinerun_to_delete in $(echo "$all_pipelineruns_in_namespace" | grep "$pipeline" | head -n -$NUM_PIPELINERUNS_TO_KEEP | awk '{ print $2 }'); do
#                                 oc delete pipelinerun -n "$namespace" "$pipelinerun_to_delete"
#                             done
#                         done
#                     done
