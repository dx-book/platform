apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-github-resources
  namespace: tekton-tasks
spec:
  description: |
    Creates webhook and deployment key in github repository.
    Webhook will trigger enventlistener in ci-cd namespace for project.
  params:
    - name: org
      description: org in github
    - name: repo-name
      description: repository in github
    - name: cluster
      description: URL for the cluster
      default: eu-north-1.training.dx-book.com
    - name: domain
      description: root level domain name
      default: training.dx-book.com

  steps:
    - name: create-webhook
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: GITHUB_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: github-admin-auth
              key: GITHUB_CREDENTIALS
      script: |
        #!/bin/sh

        echo "Creating webhook for $(params.org)/$(params.repo-name)"

        curl -X POST \
          -L https://api.github.com/repos/$(params.org)/$(params.repo-name)/hooks \
          -H "Accept: application/vnd.github.v3+json" \
          -u $(params.org):$GITHUB_CREDENTIALS \
          -H 'cache-control: no-cache' \
          -d '{ 
          "name": "web",
          "active": true,
          "config": { 
            "url": "https://$(params.cluster)/github/$(params.org)/$(params.repo-name)/webhook",
            "content_type": "json",
            "insecure_ssl": 1
          },
          "events": [  
            "pull_request", 
            "push",
            "delete"
          ] 
        }'

    - name: create-repository-key
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: GITHUB_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: github-admin-auth
              key: GITHUB_CREDENTIALS
      script: |
        #!/usr/bin/env bash

        key_filename=github
        secret_name=git-credentials
        comment=tkn-$(params.repo-name)@$(params.cluster)

        function cleanup {
          local to_remove=("$key_filename" "$key_filename.pub" payload)
          echo
          echo "removing ${to_remove[*]}"

          for filename in "${to_remove[@]}"; do
            # -f makes it not failing when missing
            rm -f "$filename"
          done
        }

        trap cleanup EXIT

        # generate ssh-key
        # https://security.stackexchange.com/questions/143442/what-are-ssh-keygen-best-practices
        cd /tmp
        echo "Generating ssh key $comment"
        ssh-keygen -t rsa -b 2048 -C $comment -P "" -f $key_filename

        # Download kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl

        SECRET_EXISTS=false
        if ./kubectl get secret $secret_name --namespace $(params.repo-name)-ci-cd > /dev/null 2>&1; then
          SECRET_EXISTS=true
        fi

        echo "SECRET_EXISTS=$SECRET_EXISTS"

        if [ "$SECRET_EXISTS" = false ] ; then
          # create secret in project ci-cd namespace
          ./kubectl create secret generic $secret_name \
            --from-file=id_rsa=$key_filename \
            --namespace $(params.repo-name)-ci-cd

          # annotate, such that tekton picks it up
          ./kubectl annotate secret $secret_name \
            --namespace $(params.repo-name)-ci-cd \
            tekton.dev/git-0=github.com \
            --overwrite
        fi

        cat << EOF > payload

        {
          "title": "$comment",
          "key": "$(cat $key_filename.pub) $comment",
          "read_only": false
        }

        EOF

        if [ "$SECRET_EXISTS" = false ] ; then
          echo "Requesting to GitHub API for $(params.org)/$(params.repo-name)"
          curl -X POST -u $(params.org):$GITHUB_CREDENTIALS \
            -L https://api.github.com/repos/$(params.org)/$(params.repo-name)/keys \
            -H "Accept: application/vnd.github.v3+json" \
            -u $(params.org):$GITHUB_CREDENTIALS \
            -H 'cache-control: no-cache' \
            -d @payload
        else
          echo "Skipped because the secret already exists"
        fi

    - name: create-environments-key
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: GITHUB_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: github-admin-auth
              key: GITHUB_CREDENTIALS
      script: |
        #!/usr/bin/env bash

        key_filename=envs
        secret_name=git-credentials-envs
        comment=$(params.repo-name)@$(params.cluster)

        function cleanup {
          local to_remove=("$key_filename" "$key_filename.pub" payload)
          echo
          echo "removing ${to_remove[*]}"

          for filename in "${to_remove[@]}"; do
            # -f makes it not failing when missing
            rm -f "$filename"
          done
        }

        trap cleanup EXIT

        cd /tmp
        echo "Generating ssh key $comment"
        ssh-keygen -t rsa -b 2048 -C $comment -P "" -f $key_filename

        # Download kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl

        SECRET_EXISTS=false
        if ./kubectl get secret $secret_name --namespace $(params.repo-name)-ci-cd > /dev/null 2>&1; then
          SECRET_EXISTS=true
        fi

        echo "SECRET_EXISTS=$SECRET_EXISTS"

        if [ "$SECRET_EXISTS" = false ] ; then
          # create secret in project ci-cd namespace
          ./kubectl create secret generic $secret_name \
            --from-file=id_rsa=$key_filename \
            --namespace $(params.repo-name)-ci-cd

          # annotate, such that tekton picks it up
          ./kubectl annotate secret $secret_name \
            --namespace $(params.repo-name)-ci-cd \
            tekton.dev/git-0=github.com \
            --overwrite
        fi

        cat << EOF > payload

        {
          "title": "$comment",
          "key": "$(cat $key_filename.pub) $comment",
          "read_only": false
        }

        EOF

        if [ "$SECRET_EXISTS" = false ] ; then
          echo "Requesting to GitHub API for $(params.org)/environments"
          curl -X POST -u $(params.org):$GITHUB_CREDENTIALS \
            -L https://api.github.com/repos/$(params.org)/environments/keys \
            -H "Accept: application/vnd.github.v3+json" \
            -u $(params.org):$GITHUB_CREDENTIALS \
            -H 'cache-control: no-cache' \
            -d @payload
        else
          echo "Skipped because the secret already exists"
        fi

    - name: create-webhook-argocd
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: GITHUB_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: github-admin-auth
              key: GITHUB_CREDENTIALS
      script: |
        #!/bin/sh

        curl -X POST \
          -L https://api.github.com/repos/$(params.org)/$(params.repo-name)/hooks \
          -H "Accept: application/vnd.github.v3+json" \
          -u $(params.org):$GITHUB_CREDENTIALS \
          -H 'cache-control: no-cache' \
          -d '{ 
          "name": "web",
          "active": true,
          "config": { 
            "url": "https://argocd.$(params.domain)/api/webhook",
            "content_type": "json",
            "insecure_ssl": 1
          },
          "events": [  
            "pull_request", 
            "push"
          ] 
        }'
