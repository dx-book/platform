apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: identify
  namespace: tekton-tasks
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  description: Identifies runtime, extracts the version number and stores it in result.
  params:
    - name: environments
      description: GitOps environments repository git url
      type: string
    - name: path
      description: Subpath containing the applications metadata yaml definition
      type: string
    - description: revision type
      name: revision_type
      type: string
    - default: ""
      description: Subdirectory inside the `source` Workspace
      name: subdirectory
      type: string
    - name: repository
      description: github repository
      type: string
  results:
    - name: version
      description: parsed version from manifest files
    - name: runtime
      description: detected runtime
    - name: shared
      description: the shared values from the environments/shared.yaml
    - name: service
      description: the service metadata values from the environments repository
    - name: shared-domain
      description: the complete domain url
    - name: aws-account
      description: the aws account
    - name: aws-region
      description: the aws region
    - name: team
      description: the team name this application belongs to
    - name: application
      description: the application name
  workspaces:
    - name: source
      description: Workspace where source is cloned to.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  steps:
    - name: version
      workingDir: $(workspaces.source.path)/$(params.subdirectory)
      image: registry.access.redhat.com/ubi8/toolbox:8.5
      script: |
        #!/bin/sh
        echo "Detected branch type: $(params.revision_type)"
        package=package.json
        runtime=undefined
        if [ -f $package ]; then
            runtime=nodejs
        else
            echo "Missing package.json"
        fi

        if [ "$runtime" = "nodejs" ]; then
          version=$(cat $package \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g')

          version=$(echo -e $version)
        fi

        echo "Detected runtime: $runtime"
        echo "Detected version: $version"
        printf %s "$version" >> /tekton/results/version
        printf %s "$runtime" >> /tekton/results/runtime

    - name: environment
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/bin/sh
        # Copy the SSH directory from a path specified by the WORKSPACE_SSH_DIRECTORY_PATH environment variable to the home directory.
        cp -R ${WORKSPACE_SSH_DIRECTORY_PATH} $HOME/.ssh

        # Modify permissions of the .ssh directory to be read, write, and execute only by the owner (this is what the 700 permission means).
        chmod 700 $HOME/.ssh

        # Modify permissions of all files in the .ssh directory to be read only by the owner (this is what the 400 permission means).
        chmod -R 400 $HOME/.ssh/*

        # Run ssh-keyscan to get the public key of github.com and add it to the known_hosts file.
        # This is a measure against man-in-the-middle attacks.
        ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts

        # Test the SSH connection to GitHub. 
        # This line isn't necessary for the clone operation, it's likely used for debugging or to ensure that the SSH setup was successful.
        ssh -T git@github.com

        # Clone the repository from GitHub quietly (i.e., without logging the process in the console) and discard any other output.
        git clone --quiet $(params.environments) > /dev/null
        cd environments

        # Print the service metadata header.
        echo -e "\n"
        echo -e "👉🏻 Service metadata" 
        cat $(params.path)/$(params.repository).yaml

        # Print the shared values file
        echo -e "\n"
        echo -e "👉🏻 Shared values" 
        cat shared.yaml

        # Append the content of the 'shared.yaml' file to the '/tekton/results/shared' file.
        # This is used as output or to share data between steps in a Tekton task.
        printf %s "$(cat shared.yaml)" >> /tekton/results/shared

        # Append the content of the repository metadata file to the '/tekton/results/service' file.
        # This is used as output or to share data between steps in a Tekton task.
        printf %s "$(cat $(params.path)/$(params.repository).yaml)" >> /tekton/results/service

        curl -Lsk https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq && chmod +x yq
        echo "$(cat shared.yaml)" > shared.yaml
        echo "$(cat $(params.path)/$(params.repository).yaml)" > service.yaml

        domain=$(./yq '.domain' shared.yaml)
        aws_account=$(./yq '.aws.account' shared.yaml)
        aws_region=$(./yq '.aws.region' shared.yaml)

        team=$(./yq '.info.team' $(params.path)/$(params.repository).yaml)
        application=$(./yq '.info.team' $(params.path)/$(params.repository).yaml)
        echo -n "$team" | tee $(results.team.path)
        echo -n "$application" | tee $(results.application.path)

        echo -n "$domain" | tee $(results.shared-domain.path)
        echo -n "$aws_account" | tee $(results.aws-account.path)
        echo -n "$aws_region" | tee $(results.aws-region.path)
