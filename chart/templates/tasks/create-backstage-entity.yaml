apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-backstage-entity
  namespace: tekton-tasks
spec:
  description: |
    This script creates a Kubernetes-like entity for Backstage, checks if it already exists in a groups.yaml file in a given directory, 
    and if it does not, appends it to the file, commits the changes, and pushes the commit to a remote repository. 
    If the entity already exists, it outputs a message and does not perform any actions.
  params:
    - name: name
      description: file name
    - name: kind
      description: entity type, group, etc
      default: Group
    - name: type
      description: entity type, group, etc
    - name: repository
      description: repository in github, usually environments
    - name: path
      description: entities path within the repository
      default: entities
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  steps:
    - name: create-entity
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/bin/sh

        if [ "$(workspaces.ssh-directory.bound)" = false ] ; then
          echo "Not bound: ssh-directory"
          exit 0;
        fi

        cp -R ${WORKSPACE_SSH_DIRECTORY_PATH} $HOME/.ssh
        chmod 700 $HOME/.ssh
        chmod -R 400 $HOME/.ssh/*
        ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts
        ssh -T git@github.com
        git clone --quiet $(params.repository)

        git config --global user.email "taskrun@platform"
        git config --global user.name "Platform via TaskRun"

        # Define a multi-line string named 'entity', with multiple placeholders for parameters to be substituted
        entity="
        ---
        apiVersion: backstage.io/v1alpha1
        kind: $(params.kind)
        metadata:
          name: $(params.name)
        spec:
          type: $(params.type)
          children: []
        "

        # Remove the leading newline character in 'entity'
        entity="${entity/\\n/}"

        # Change the working directory to the subdirectory specified by the placeholder parameter
        cd environments/$(params.path)

        # If the exact content of 'entity' is NOT found in the 'groups.yaml' file
        if ! grep -Fxq "$entity" groups.yaml; then
          # Append the content of 'entity' to the end of 'groups.yaml'
          echo "$entity" >> groups.yaml
          # Stage the changes in 'groups.yaml' for a commit
          git add groups.yaml
          # Commit the changes with a message "New entity"
          git commit -m "New entity"
          # Push the commit to the 'main' branch on the remote repository 'origin'
          git push origin main
        # If the exact content of 'entity' IS found in the 'groups.yaml' file
        else
          # Output a message indicating that the entity already exists and thus no action was performed
          echo "Skipped because the entity $(params.kind)/$(params.name) already exists"
        fi
