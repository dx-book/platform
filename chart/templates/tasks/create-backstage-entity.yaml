apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-backstage-entity
  namespace: tekton-tasks
spec:
  description: |
    Task to create a new entity in Backstage.
    It does not create automatically within the instance, you need to configure the catalog to
    point to the file generated by this task. This task will create a file in a repository
    and append entities if they do not exist already
  params:
    - name: name
      description: file name
    - name: kind
      description: entity type, group, etc
      default: Group
    - name: type
      description: entity type, group, etc
    - name: repository
      description: repository in github, usually environments
    - name: path
      description: entities path within the repository
      default: entities
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  steps:
    - name: create-entity
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/bin/sh

        if [ "$(workspaces.ssh-directory.bound)" = false ] ; then
          echo "Not bound: ssh-directory"
          exit 0;
        fi

        cp -R ${WORKSPACE_SSH_DIRECTORY_PATH} $HOME/.ssh
        chmod 700 $HOME/.ssh
        chmod -R 400 $HOME/.ssh/*
        ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts
        ssh -T git@github.com
        git clone --quiet $(params.repository)

        git config --global user.email "taskrun@platform"
        git config --global user.name "Platform via TaskRun"

        cd environments/$(params.path)
        cat <<EOF >> groups.yaml
        ---
        apiVersion: backstage.io/v1alpha1
        kind: $(params.kind)
        metadata:
          name: $(params.name)
        spec:
          type: $(params.type)
          children: []
        EOF

        git add groups.yaml
        git commit -m "New entity"
        git push origin main
