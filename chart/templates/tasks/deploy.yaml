apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
  namespace: tekton-tasks
spec:
  description: This task updates the environments repository with new image to deploy the newly built image.
  params:
    - name: org
      description: GitHub organization
      type: string
    - name: environments
      description: GitOps environments repository git url
      type: string
    - name: path
      description: Subpath containing the applications metadata yaml definition
      type: string
    - name: application_name
      description: Application name
      type: string
    - name: version
      description: Application version
      type: string
    - name: chart_version
      description: Application Helm Chart version
      type: string
    - name: git-credentials
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: subdirectory
      description: Subdirectory inside the `source` Workspace
      default: ""
      type: string
    - name: revision_type
      description: type of branch
    - name: truncated_sha
      description: revision commit id
  results:
    - name: previous_chart_version
      description: Version of currently applied chart
    - name: previous_version
      description: Version of currently running app
  steps:
    - name: version-bump
      image: registry.access.redhat.com/ubi8/nodejs-16
      script: |
        #!/bin/sh
        if [ "$(params.revision_type)" = "main" ]; then
          
          echo "👉🏻 Cloning environments repository"
          git clone $(params.environments)

          ls -ls $(params.path)

          git config --global user.name "Tekton Pipeline"
          git config --global user.email "tekton@platform"
          git config --global push.default simple

          cd $(params.path)

          # Download yq
          curl -Lsk https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq && chmod +x yq

          previous_chart_version=$(./yq '.deployment.chart' $(params.org)/$(params.application_name).yaml)
          previous_version=$(./yq '.deployment.values.image.version' $(params.org)/$(params.application_name).yaml)

          echo "👉🏻 Get versions"
          echo "Chart: $previous_chart_version"
          echo "Application: $previous_version"

          export CHART=$previous_chart_version
          export VERSION=$(params.version)
          export REVISION=$(params.truncated_sha)
          
          echo "👉🏻 Replace old version with updated on"
          ./yq e -i ".deployment.chart = env(CHART)" $(params.org)/$(params.application_name).yaml
          ./yq e -i ".deployment.values.image.version = env(VERSION)" $(params.org)/$(params.application_name).yaml
          ./yq e -i ".deployment.values.image.revision = env(REVISION)" $(params.org)/$(params.application_name).yaml

          echo "👉🏻 Updated file"
          cat $(params.org)/$(params.application_name).yaml

          echo "👉🏻 Pushing to repo"
          git commit -am "👉🏻 Automated commit - Deployment of $(params.org)/$(params.application_name) at version $(params.version) (#$(params.truncated_sha))"
          git push

          echo -n $previous_version | tee $(results.previous_version.path)
          echo -n $(params.revision_type) | tee $(results.previous_chart_version.path)

        else
          echo "Skipped due to non-main branch"
          echo -n "" | tee $(results.previous_version.path)
          echo -n "" | tee $(results.previous_chart_version.path)
        fi

    - name: argocd-create-application
      image: bitnami/kubectl
      script: |
        #!/bin/sh
        if [ "$(params.revision_type)" != "main" ]; then
          # todo: refactor, not pretty
          cd /tmp
          touch application.yaml
          echo "apiVersion: argoproj.io/v1alpha1" >> application.yaml
          echo "kind: Application" >> application.yaml
          echo "metadata:" >> application.yaml
          echo "  name: $(params.application_name)-$(params.revision_type)" >> application.yaml
          echo "  namespace: argocd" >> application.yaml
          echo "spec:" >> application.yaml
          echo "  destination:" >> application.yaml
          echo "    namespace: $(params.org)-development" >> application.yaml
          echo "    server: https://kubernetes.default.svc" >> application.yaml
          echo "  project: default" >> application.yaml
          echo "  source:" >> application.yaml
          echo "    path: chart" >> application.yaml
          echo "    repoURL: https://github.com/$(params.org)/$(params.application_name)" >> application.yaml
          echo "    targetRevision: $(params.revision_type)" >> application.yaml
          echo "    helm:" >> application.yaml
          echo "      releaseName: $(params.application_name)-$(params.revision_type)" >> application.yaml
          echo "      values: | " >> application.yaml
          echo "        revision: $(params.revision_type)" >> application.yaml
          echo "        image:" >> application.yaml
          echo "          version: $(params.revision_type)" >> application.yaml

          echo "        environment:" >> application.yaml
          echo "          test:" >> application.yaml
          echo "            enabled: true" >> application.yaml
          echo "        mongodb:" >> application.yaml
          echo "          architecture: standalone" >> application.yaml
          echo "          global:" >> application.yaml
          echo "            namespaceOverride: $(params.org)-development" >> application.yaml
          echo "          persistence:" >> application.yaml
          echo "            enabled: false" >> application.yaml
          echo "          auth:" >> application.yaml
          echo "            enabled: false" >> application.yaml

          echo "  syncPolicy:" >> application.yaml
          echo "    automated:" >> application.yaml
          echo "      prune: true" >> application.yaml
          echo "      selfHeal: true" >> application.yaml
          echo "    syncOptions:" >> application.yaml
          echo "      - Validate=true" >> application.yaml

          cat application.yaml
          kubectl apply -f application.yaml
        fi

    - name: rollout
      image: bitnami/kubectl
      script: |
        #!/bin/sh
        if [ "$(params.revision_type)" = "main" ]; then
          kubectl set env deployment/$(params.application_name) REVISION=$(params.truncated_sha) -n $(params.org)-development
          kubectl patch app/$(params.application_name) -n argocd --type merge -p='{"metadata": {"annotations":{"argocd.argoproj.io/refresh": "hard"}}}'
          # kubectl rollout restart deployment/$(params.application_name) -n $(params.org)-development
        fi
