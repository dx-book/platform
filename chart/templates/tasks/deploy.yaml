apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
  namespace: tekton-tasks
spec:
  description: This task updates the environments repository with new image to deploy the newly built image.
  params:
    - name: org
      description: GitHub organization
      type: string
    - name: environments
      description: GitOps environments repository git url
      type: string
    - name: path
      description: Subpath containing the applications metadata yaml definition
      type: string
    - name: application_name
      description: Application name
      type: string
    - name: version
      description: Application version
      type: string
    - name: chart_version
      description: Application Helm Chart version
      type: string
    - name: subdirectory
      description: Subdirectory inside the `source` Workspace
      default: ""
      type: string
    - name: revision_type
      description: type of branch
    - name: truncated_sha
      description: revision commit id
    - name: git-username
      type: string
      description: |
        Git user name for performing git operation.
      default: "Tekton Pipeline"
    - name: git-email
      type: string
      description: |
        Git user email for performing git operation.
      default: "tekton@platform"
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  results:
    - name: previous_chart_version
      description: Version of currently applied chart
    - name: previous_version
      description: Version of currently running app
  steps:
    - name: version-bump
      image: registry.access.redhat.com/ubi8/nodejs-16
      env:
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/bin/sh
        if [ "$(params.revision_type)" = "main" ]; then

          # prep
          cp -R ${WORKSPACE_SSH_DIRECTORY_PATH} $HOME/.ssh
          chmod 700 $HOME/.ssh
          chmod -R 400 $HOME/.ssh/*
          ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts

          # clone repository
          echo "👉🏻 Cloning $(params.environments)"
          ssh -T git@github.com
          git clone $(params.environments)
          cd environments

          git config --global user.name "$(params.git-username)"
          git config --global user.email "$(params.git-email)"
          git config --global push.default simple

          # Download yq
          curl -Lsk https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq && chmod +x yq

          previous_chart_version=$(./yq '.info.chart' $(params.path)/$(params.application_name).yaml)
          previous_version=$(./yq '.info.version' $(params.path)/$(params.application_name).yaml)

          echo "👉🏻 Get versions"
          echo "Chart: $previous_chart_version"
          echo "Application: $previous_version"

          export CHART=$(params.chart_version)
          export VERSION=$(params.version)
          export REVISION=$(params.truncated_sha)
          
          echo "👉🏻 Replace old version with updated on"
          ./yq e -i ".info.chart = env(CHART)" $(params.path)/$(params.application_name).yaml
          ./yq e -i ".info.version = env(VERSION)" $(params.path)/$(params.application_name).yaml
          ./yq e -i ".info.revision = env(REVISION)" $(params.path)/$(params.application_name).yaml

          echo -n ""
          echo "👉🏻 Updated file"
          cat $(params.path)/$(params.application_name).yaml

          echo -n ""
          echo "👉🏻 Pushing"
          git commit -am "👉🏻 Deployment of $(params.application_name) at version $(params.version) (#$(params.truncated_sha))"
          git push

          echo -n $previous_version | tee $(results.previous_version.path)
          echo -n $(params.revision_type) | tee $(results.previous_chart_version.path)

        else
          echo "Skipped due to non-main branch"
          echo -n "" | tee $(results.previous_version.path)
          echo -n "" | tee $(results.previous_chart_version.path)
        fi

    - name: argocd-create-application
      image: bitnami/kubectl
      script: |
        #!/bin/sh

        cd /tmp

        cat << EOF > application.yaml
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: $(params.application_name)-$(params.revision_type)
          namespace: argocd
        spec:
          destination:
            namespace: $(params.org)-development
            server: https://kubernetes.default.svc
          project: default
          source:
            path: chart
            repoURL: https://github.com/$(params.org)/$(params.application_name)
            targetRevision: $(params.revision_type)
            helm:
              releaseName: $(params.application_name)-$(params.revision_type)
              values: | 
                name: $(params.application_name)
                team: null
                repo: null
                chart: null
                domain: null
                revision: $(params.revision_type)
                image:
                  version: $(params.revision_type)
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
              - Validate=true
        EOF

        if [ "$(params.revision_type)" != "main" ]; then
          cat application.yaml
          kubectl apply -f application.yaml
        fi

    - name: rollout
      image: bitnami/kubectl
      script: |
        #!/bin/sh
        if [ "$(params.revision_type)" = "main" ]; then
          kubectl set env deployment/$(params.application_name) REVISION=$(params.truncated_sha) -n $(params.org)-development
          kubectl patch app/$(params.application_name) -n argocd --type merge -p='{"metadata": {"annotations":{"argocd.argoproj.io/refresh": "hard"}}}'
          # kubectl rollout restart deployment/$(params.application_name) -n $(params.org)-development
        fi
